{"version":3,"sources":["node_modules\\web-audio-analyser\\index.js","index.js"],"names":["audio","document","getElementById","startVisualizer","analyser","require","canvas","ctx","getContext","width","window","innerWidth","height","innerHeight","update","audioFreq","waveform","fillStyle","globalAlpha","fillRect","strokeStyle","lineWidth","beginPath","moveTo","i","length","lineTo","stroke","input","onchange","e","src","URL","createObjectURL","files","play","style","cssText","onend","revokeObjectURL","onclick"],"mappings":"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","file":"reverb.c88300ee.map","sourceRoot":"..","sourcesContent":["var AudioContext = window.AudioContext || window.webkitAudioContext\n\nmodule.exports = WebAudioAnalyser\n\nfunction WebAudioAnalyser(audio, ctx, opts) {\n  if (!(this instanceof WebAudioAnalyser)) return new WebAudioAnalyser(audio, ctx, opts)\n  if (!(ctx instanceof AudioContext)) (opts = ctx), (ctx = null)\n\n  opts = opts || {}\n  this.ctx = ctx = ctx || new AudioContext\n\n  if (!(audio instanceof AudioNode)) {\n    audio = (audio instanceof Audio || audio instanceof HTMLAudioElement)\n      ? ctx.createMediaElementSource(audio)\n      : ctx.createMediaStreamSource(audio)\n  }\n\n  this.analyser = ctx.createAnalyser()\n  this.stereo   = !!opts.stereo\n  this.audible  = opts.audible !== false\n  this.wavedata = null\n  this.freqdata = null\n  this.splitter = null\n  this.merger   = null\n  this.source   = audio\n\n  if (!this.stereo) {\n    this.output = this.source\n    this.source.connect(this.analyser)\n    if (this.audible)\n      this.analyser.connect(ctx.destination)\n  } else {\n    this.analyser = [this.analyser]\n    this.analyser.push(ctx.createAnalyser())\n\n    this.splitter = ctx.createChannelSplitter(2)\n    this.merger   = ctx.createChannelMerger(2)\n    this.output   = this.merger\n\n    this.source.connect(this.splitter)\n\n    for (var i = 0; i < 2; i++) {\n      this.splitter.connect(this.analyser[i], i, 0)\n      this.analyser[i].connect(this.merger, 0, i)\n    }\n\n    if (this.audible)\n      this.merger.connect(ctx.destination)\n  }\n}\n\nWebAudioAnalyser.prototype.waveform = function(output, channel) {\n  if (!output) output = this.wavedata || (\n    this.wavedata = new Uint8Array((this.analyser[0] || this.analyser).frequencyBinCount)\n  )\n\n  var analyser = this.stereo\n    ? this.analyser[channel || 0]\n    : this.analyser\n\n  analyser.getByteTimeDomainData(output)\n\n  return output\n}\n\nWebAudioAnalyser.prototype.frequencies = function(output, channel) {\n  if (!output) output = this.freqdata || (\n    this.freqdata = new Uint8Array((this.analyser[0] || this.analyser).frequencyBinCount)\n  )\n\n  var analyser = this.stereo\n    ? this.analyser[channel || 0]\n    : this.analyser\n\n  analyser.getByteFrequencyData(output)\n\n  return output\n}\n","var audio = document.getElementById('audio')\r\n\r\ninput.onchange = function(e) {\r\n    audio.src = URL.createObjectURL(this.files[0]);\r\n    audio.play()\r\n    startVisualizer()\r\n\r\n    // Hide file upload div. Show visualizer.\r\n    document.getElementById('step1').style.cssText = \"display: none;\"\r\n    document.getElementById('step2').style.cssText = \"\"\r\n    \r\n    audio.onend = function(e) {\r\n        URL.revokeObjectURL(this.src);\r\n    }\r\n}\r\n\r\ndocument.getElementById('playDefaultLink').onclick = (e) => {\r\n    audio.play()\r\n    startVisualizer()\r\n\r\n    // Hide file upload div. Show visualizer.\r\n    document.getElementById('step1').style.cssText = \"display: none;\"\r\n    document.getElementById('step2').style.cssText = \"\"\r\n}\r\n\r\nfunction startVisualizer() {\r\n    var analyser = require('web-audio-analyser')(audio);\r\n    var canvas = document.getElementById('canvas');\r\n    var ctx = canvas.getContext('2d');\r\n\r\n    canvas.width = window.innerWidth;\r\n    canvas.height = window.innerHeight;\r\n\r\n    function update() {\r\n        var audioFreq = analyser.waveform()\r\n\r\n        // Clear canvas\r\n        ctx.fillStyle=\"black\";\r\n        ctx.globalAlpha = 0.4;\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n        ctx.globalAlpha = 1.0\r\n\r\n        // Set line style\r\n        var scaleFactor = 1.5;\r\n        ctx.strokeStyle = \"white\"\r\n        ctx.lineWidth = 1.5;\r\n\r\n        // Draw frequency lines\r\n        ctx.beginPath();\r\n        ctx.moveTo(0, canvas.height/2 - audioFreq[0]*scaleFactor);\r\n        for (let i = 0; i < audioFreq.length; i++) {\r\n            ctx.lineTo((canvas.width/audioFreq.length)*i, canvas.height/2 - audioFreq[i]*scaleFactor);\r\n        }\r\n\r\n        ctx.moveTo(0, canvas.height/2 + audioFreq[0]*scaleFactor);\r\n        for (let i = 0; i < audioFreq.length; i++) {\r\n            ctx.lineTo((canvas.width/audioFreq.length)*i, canvas.height/2 + audioFreq[i]*scaleFactor);\r\n        }\r\n        ctx.stroke();\r\n\r\n        requestAnimationFrame(update);\r\n    }\r\n\r\n    update()\r\n}"]}