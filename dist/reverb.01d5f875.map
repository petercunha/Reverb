{"version":3,"sources":["node_modules\\web-audio-analyser\\index.js","index.js"],"names":["audio","document","getElementById","input","onchange","e","src","URL","createObjectURL","files","play","startVisualizer","style","cssText","onend","revokeObjectURL","onclick","analyser","require","canvas","ctx","getContext","width","window","innerWidth","height","innerHeight","update","audioFreq","waveform","fillStyle","fillRect","scaleFactor","strokeStyle","lineWidth","beginPath","moveTo","i","length","lineTo","stroke","requestAnimationFrame"],"mappingscAAT,CAAwB,OAAxB,CAAZ;;AAEAC,MAAMC,QAAN,GAAiB,UAASC,CAAT,EAAY;AACzBL,UAAMM,GAAN,GAAYC,IAAIC,eAAJ,CAAoB,KAAKC,KAAL,CAAW,CAAX,CAApB,CAAZ;AACAT,UAAMU,IAAN;AACAC;;AAEA;AACAV,aAASC,cAAT,CAAwB,OAAxB,EAAiCU,KAAjC,CAAuCC,OAAvC,GAAiD,gBAAjD;AACAZ,aAASC,cAAT,CAAwB,OAAxB,EAAiCU,KAAjC,CAAuCC,OAAvC,GAAiD,EAAjD;;AAEAb,UAAMc,KAAN,GAAc,UAAST,CAAT,EAAY;AACtBE,YAAIQ,eAAJ,CAAoB,KAAKT,GAAzB;AACH,KAFD;AAGH,CAZD;;AAcAL,SAASC,cAAT,CAAwB,iBAAxB,EAA2Cc,OAA3C,GAAqD,UAACX,CAAD,EAAO;AACxDL,UAAMU,IAAN;AACAC;;AAEA;AACAV,aAASC,cAAT,CAAwB,OAAxB,EAAiCU,KAAjC,CAAuCC,OAAvC,GAAiD,gBAAjD;AACAZ,aAASC,cAAT,CAAwB,OAAxB,EAAiCU,KAAjC,CAAuCC,OAAvC,GAAiD,EAAjD;AACH,CAPD;;AASA,SAASF,eAAT,GAA2B;AACvB,QAAIM,WAAWC,QAAQ,oBAAR,EAA8BlB,KAA9B,CAAf;AACA,QAAImB,SAASlB,SAASC,cAAT,CAAwB,QAAxB,CAAb;AACA,QAAIkB,MAAMD,OAAOE,UAAP,CAAkB,IAAlB,CAAV;;AAEAF,WAAOG,KAAP,GAAeC,OAAOC,UAAtB;AACAL,WAAOM,MAAP,GAAgBF,OAAOG,WAAvB;;AAEA,aAASC,MAAT,GAAkB;AACd,YAAIC,YAAYX,SAASY,QAAT,EAAhB;;AAEA;AACAT,YAAIU,SAAJ,GAAc,OAAd;AACAV,YAAIW,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAmBZ,OAAOG,KAA1B,EAAiCH,OAAOM,MAAxC;;AAEA;AACA,YAAIO,cAAc,GAAlB;AACAZ,YAAIa,WAAJ,GAAkB,OAAlB;AACAb,YAAIc,SAAJ,GAAgB,GAAhB;;AAEA;AACAd,YAAIe,SAAJ;AACAf,YAAIgB,MAAJ,CAAW,CAAX,EAAcjB,OAAOM,MAAP,GAAc,CAAd,GAAkBG,UAAU,CAAV,IAAaI,WAA7C;AACA,aAAK,IAAIK,IAAI,CAAb,EAAgBA,IAAIT,UAAUU,MAA9B,EAAsCD,GAAtC,EAA2C;AACvCjB,gBAAImB,MAAJ,CAAYpB,OAAOG,KAAP,GAAaM,UAAUU,MAAxB,GAAgCD,CAA3C,EAA8ClB,OAAOM,MAAP,GAAc,CAAd,GAAkBG,UAAUS,CAAV,IAAaL,WAA7E;AACH;;AAEDZ,YAAIgB,MAAJ,CAAW,CAAX,EAAcjB,OAAOM,MAAP,GAAc,CAAd,GAAkBG,UAAU,CAAV,IAAaI,WAA7C;AACA,aAAK,IAAIK,KAAI,CAAb,EAAgBA,KAAIT,UAAUU,MAA9B,EAAsCD,IAAtC,EAA2C;AACvCjB,gBAAImB,MAAJ,CAAYpB,OAAOG,KAAP,GAAaM,UAAUU,MAAxB,GAAgCD,EAA3C,EAA8ClB,OAAOM,MAAP,GAAc,CAAd,GAAkBG,UAAUS,EAAV,IAAaL,WAA7E;AACH;AACDZ,YAAIoB,MAAJ;;AAEAC,8BAAsBd,MAAtB;AACH;;AAEDA;AACH","file":"reverb.01d5f875.map","sourceRoot":"..","sourcesContent":["var AudioContext = window.AudioContext || window.webkitAudioContext\n\nmodule.exports = WebAudioAnalyser\n\nfunction WebAudioAnalyser(audio, ctx, opts) {\n  if (!(this instanceof WebAudioAnalyser)) return new WebAudioAnalyser(audio, ctx, opts)\n  if (!(ctx instanceof AudioContext)) (opts = ctx), (ctx = null)\n\n  opts = opts || {}\n  this.ctx = ctx = ctx || new AudioContext\n\n  if (!(audio instanceof AudioNode)) {\n    audio = (audio instanceof Audio || audio instanceof HTMLAudioElement)\n      ? ctx.createMediaElementSource(audio)\n      : ctx.createMediaStreamSource(audio)\n  }\n\n  this.analyser = ctx.createAnalyser()\n  this.stereo   = !!opts.stereo\n  this.audible  = opts.audible !== false\n  this.wavedata = null\n  this.freqdata = null\n  this.splitter = null\n  this.merger   = null\n  this.source   = audio\n\n  if (!this.stereo) {\n    this.output = this.source\n    this.source.connect(this.analyser)\n    if (this.audible)\n      this.analyser.connect(ctx.destination)\n  } else {\n    this.analyser = [this.analyser]\n    this.analyser.push(ctx.createAnalyser())\n\n    this.splitter = ctx.createChannelSplitter(2)\n    this.merger   = ctx.createChannelMerger(2)\n    this.output   = this.merger\n\n    this.source.connect(this.splitter)\n\n    for (var i = 0; i < 2; i++) {\n      this.splitter.connect(this.analyser[i], i, 0)\n      this.analyser[i].connect(this.merger, 0, i)\n    }\n\n    if (this.audible)\n      this.merger.connect(ctx.destination)\n  }\n}\n\nWebAudioAnalyser.prototype.waveform = function(output, channel) {\n  if (!output) output = this.wavedata || (\n    this.wavedata = new Uint8Array((this.analyser[0] || this.analyser).frequencyBinCount)\n  )\n\n  var analyser = this.stereo\n    ? this.analyser[channel || 0]\n    : this.analyser\n\n  analyser.getByteTimeDomainData(output)\n\n  return output\n}\n\nWebAudioAnalyser.prototype.frequencies = function(output, channel) {\n  if (!output) output = this.freqdata || (\n    this.freqdata = new Uint8Array((this.analyser[0] || this.analyser).frequencyBinCount)\n  )\n\n  var analyser = this.stereo\n    ? this.analyser[channel || 0]\n    : this.analyser\n\n  analyser.getByteFrequencyData(output)\n\n  return output\n}\n","var audio = document.getElementById('audio')\r\n\r\ninput.onchange = function(e) {\r\n    audio.src = URL.createObjectURL(this.files[0]);\r\n    audio.play()\r\n    startVisualizer()\r\n\r\n    // Hide file upload div. Show visualizer.\r\n    document.getElementById('step1').style.cssText = \"display: none;\"\r\n    document.getElementById('step2').style.cssText = \"\"\r\n    \r\n    audio.onend = function(e) {\r\n        URL.revokeObjectURL(this.src);\r\n    }\r\n}\r\n\r\ndocument.getElementById('playDefaultLink').onclick = (e) => {\r\n    audio.play()\r\n    startVisualizer()\r\n\r\n    // Hide file upload div. Show visualizer.\r\n    document.getElementById('step1').style.cssText = \"display: none;\"\r\n    document.getElementById('step2').style.cssText = \"\"\r\n}\r\n\r\nfunction startVisualizer() {\r\n    var analyser = require('web-audio-analyser')(audio);\r\n    var canvas = document.getElementById('canvas');\r\n    var ctx = canvas.getContext('2d');\r\n\r\n    canvas.width = window.innerWidth;\r\n    canvas.height = window.innerHeight;\r\n\r\n    function update() {\r\n        var audioFreq = analyser.waveform()\r\n\r\n        // Clear canvas\r\n        ctx.fillStyle=\"black\";\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Set line style\r\n        var scaleFactor = 0.8;\r\n        ctx.strokeStyle = \"white\"\r\n        ctx.lineWidth = 1.5;\r\n\r\n        // Draw frequency lines\r\n        ctx.beginPath();\r\n        ctx.moveTo(0, canvas.height/2 - audioFreq[0]*scaleFactor);\r\n        for (let i = 0; i < audioFreq.length; i++) {\r\n            ctx.lineTo((canvas.width/audioFreq.length)*i, canvas.height/2 - audioFreq[i]*scaleFactor);\r\n        }\r\n\r\n        ctx.moveTo(0, canvas.height/2 + audioFreq[0]*scaleFactor);\r\n        for (let i = 0; i < audioFreq.length; i++) {\r\n            ctx.lineTo((canvas.width/audioFreq.length)*i, canvas.height/2 + audioFreq[i]*scaleFactor);\r\n        }\r\n        ctx.stroke();\r\n\r\n        requestAnimationFrame(update);\r\n    }\r\n\r\n    update()\r\n}"]}